backend code for user authentification : 

Backend (Node.js, Express.js, MongoDB):
Create a new Node.js project and install necessary packages:

bash
Copy code
npm init -y
npm install express mongoose body-parser cors
Create a basic Express server:

javascript
Copy code
// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const leaveRoutes = require('./routes/leave');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/leave_management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/leave', leaveRoutes);

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Create a route for leave management:

javascript
Copy code
// routes/leave.js
const express = require('express');
const leaveController = require('../controllers/leave');

const router = express.Router();

router.post('/apply', leaveController.applyLeave);

module.exports = router;
Create a controller for leave management:

javascript
Copy code
// controllers/leave.js
const Leave = require('../models/Leave');

const applyLeave = async (req, res) => {
  try {
    const { startDate, endDate, reason } = req.body;
    const userId = req.user.id; // Assuming you have user authentication middleware

    const leave = new Leave({
      user: userId,
      startDate,
      endDate,
      reason,
      status: 'pending',
    });

    await leave.save();

    res.status(201).json({ message: 'Leave application submitted successfully.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

module.exports = { applyLeave };
Create a model for Leave:

javascript
Copy code
// models/Leave.js
const mongoose = require('mongoose');

const leaveSchema = new mongoose.Schema({
  user: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  startDate: { type: Date, required: true },
  endDate: { type: Date, required: true },
  reason: { type: String, required: true },
  status: { type: String, enum: ['pending', 'approved', 'denied'], default: 'pending' },
});

module.exports = mongoose.model('Leave', leaveSchema);

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Backend code for Leave Status : 

Backend (Node.js, Express.js, MongoDB):
Create a new Node.js project and install necessary packages:

bash
Copy code
npm init -y
npm install express mongoose body-parser cors
Create a basic Express server:

javascript
Copy code
// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const leaveRoutes = require('./routes/leave');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/leave_management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/leave', leaveRoutes);

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Create a route for leave management:

javascript
Copy code
// routes/leave.js
const express = require('express');
const leaveController = require('../controllers/leave');

const router = express.Router();

router.get('/status/:leaveId', leaveController.getLeaveStatus);

module.exports = router;
Create a controller for leave management:

javascript
Copy code
// controllers/leave.js
const Leave = require('../models/Leave');

const getLeaveStatus = async (req, res) => {
  try {
    const leaveId = req.params.leaveId;
    const leave = await Leave.findById(leaveId);

    if (!leave) {
      return res.status(404).json({ message: 'Leave not found' });
    }

    res.json({ status: leave.status });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Internal Server Error' });
  }
};

module.exports = { getLeaveStatus };


----------------------------------------------------------------------------------------------------------------------------------------------------------------


backend code for Leave history : 


Backend (Node.js, Express.js, MongoDB):
Create a new Node.js project and install necessary packages:

bash
Copy code
npm init -y
npm install express mongoose body-parser cors
Create a basic Express server:

javascript
Copy code
// server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const cors = require('cors');
const leaveRoutes = require('./routes/leave');
const managerRoutes = require('./routes/manager');

const app = express();
const PORT = process.env.PORT || 3000;

// Connect to MongoDB
mongoose.connect('mongodb://localhost/leave_management', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Middleware
app.use(cors());
app.use(bodyParser.json());

// Routes
app.use('/leave', leaveRoutes);
app.use('/manager', managerRoutes);

// Start the server
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Create routes for leave management:

javascript
Copy code
// routes/leave.js
const express = require('express');
const leaveController = require('../controllers/leave');
const authMiddleware = require('../middleware/auth');

const router = express.Router();

router.use(authMiddleware.authenticate); // Middleware to authenticate requests

router.post('/apply', leaveController.applyLeave);
router.get('/status/:leaveId', leaveController.getLeaveStatus);
router.get('/history', leaveController.getLeaveHistory);

module.exports = router;
Create controllers for leave management:

javascript
Copy code
// controllers/leave.js
const Leave = require('../models/Leave');

const applyLeave = async (req, res) => {
  // Implementation of leave application
};

const getLeaveStatus = async (req, res) => {
  // Implementation of leave status
};

const getLeaveHistory = async (req, res) => {
  // Implementation of leave history
};

module.exports = { applyLeave, getLeaveStatus, getLeaveHistory };
Create routes for manager actions:

javascript
Copy code
// routes/manager.js
const express = require('express');
const managerController = require('../controllers/manager');
const authMiddleware = require('../middleware/auth');

const router = express.Router();

router.use(authMiddleware.authenticate); // Middleware to authenticate requests
router.use(authMiddleware.checkManagerRole); // Middleware to check if the user is a manager

router.get('/team', managerController.viewTeam);
router.post('/approve/:leaveId', managerController.approveLeave);
router.post('/deny/:leaveId', managerController.denyLeave);
router.post('/addEmployee', managerController.addEmployee);
router.post('/deleteEmployee/:employeeId', managerController.deleteEmployee);

module.exports = router;
Create controllers for manager actions:

javascript
Copy code
// controllers/manager.js
const Leave = require('../models/Leave');
const User = require('../models/User');

const viewTeam = async (req, res) => {
  // Implementation of viewing team members
};

const approveLeave = async (req, res) => {
  // Implementation of leave approval
};

const denyLeave = async (req, res) => {
  // Implementation of leave denial
};

const addEmployee = async (req, res) => {
  // Implementation of adding a new employee
};

const deleteEmployee = async (req, res) => {
  // Implementation of deleting an employee
};

module.exports = { viewTeam, approveLeave, denyLeave, addEmployee, deleteEmployee };
Create middleware for authentication and role check:

javascript
Copy code
// middleware/auth.js
const jwt = require('jsonwebtoken');

const authenticate = async (req, res, next) => {
  // Implementation of JWT authentication
};

const checkManagerRole = async (req, res, next) => {
  // Implementation to check if the user is a manager
};

module.exports = { authenticate, checkManagerRole };

